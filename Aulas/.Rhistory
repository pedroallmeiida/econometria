beta_1 <- 3
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# Estimar os parâmetros do modelo de regressão linear
modelo <- lm(y ~ x)
# Armazenar as estimativas dos parâmetros
beta_0_est[i] <- coef(modelo)[1]
beta_1_est[i] <- coef(modelo)[2]
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est)
)
}
resultados
# Exibir os resultados
for (n_observacoes in tamanhos_amostra) {
cat("\nTamanho da amostra:", n_observacoes, "\n")
cat("Estimativa média de beta_0:", resultados[[paste("n =", n_observacoes)]]$mean_beta_0, "\n")
cat("Estimativa média de beta_1:", resultados[[paste("n =", n_observacoes)]]$mean_beta_1, "\n")
}
# Definir parâmetros do modelo
set.seed(123)  # Para reprodutibilidade
n_simulacoes <- 10000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c(5, 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# Estimar os parâmetros do modelo de regressão linear
modelo <- lm(y ~ x)
# Armazenar as estimativas dos parâmetros
beta_0_est[i] <- coef(modelo)[1]
beta_1_est[i] <- coef(modelo)[2]
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est)
)
}
resultados
# Exibir os resultados
for (n_observacoes in tamanhos_amostra) {
cat("\nTamanho da amostra:", n_observacoes, "\n")
cat("Estimativa média de beta_0:", resultados[[paste("n =", n_observacoes)]]$mean_beta_0, "\n")
cat("Estimativa média de beta_1:", resultados[[paste("n =", n_observacoes)]]$mean_beta_1, "\n")
}
# Definir parâmetros do modelo
set.seed(123)  # Para reprodutibilidade
n_simulacoes <- 1000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c( 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# Estimar os parâmetros do modelo de regressão linear
modelo <- lm(y ~ x)
# Armazenar as estimativas dos parâmetros
beta_0_est[i] <- coef(modelo)[1]
beta_1_est[i] <- coef(modelo)[2]
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est)
)
}
resultados
# Exibir os resultados
for (n_observacoes in tamanhos_amostra) {
cat("\nTamanho da amostra:", n_observacoes, "\n")
cat("Estimativa média de beta_0:", resultados[[paste("n =", n_observacoes)]]$mean_beta_0, "\n")
cat("Estimativa média de beta_1:", resultados[[paste("n =", n_observacoes)]]$mean_beta_1, "\n")
}
# Definir parâmetros do modelo
set.seed(123)  # Para reprodutibilidade
n_simulacoes <- 1000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c( 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# Estimar os parâmetros do modelo de regressão linear
modelo <- lm(y ~ x)
# Armazenar as estimativas dos parâmetros
beta_0_est[i] <- coef(modelo)[1]
beta_1_est[i] <- coef(modelo)[2]
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est)
eqm_beta_0 = mean(  (beta_0 - beta_0_est)^2)
# Definir parâmetros do modelo
set.seed(123)  # Para reprodutibilidade
n_simulacoes <- 1000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c( 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# Estimar os parâmetros do modelo de regressão linear
modelo <- lm(y ~ x)
# Armazenar as estimativas dos parâmetros
beta_0_est[i] <- coef(modelo)[1]
beta_1_est[i] <- coef(modelo)[2]
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est),
eqm_beta_0 = mean(  (beta_0 - beta_0_est)^2),
eqm_beta_1 = mean(  (beta_1 - beta_1_est)^2)
)
}
resultados
# Exibir os resultados
for (n_observacoes in tamanhos_amostra) {
cat("\nTamanho da amostra:", n_observacoes, "\n")
cat("Estimativa média de beta_0:", resultados[[paste("n =", n_observacoes)]]$mean_beta_0, "\n")
cat("Estimativa média de beta_1:", resultados[[paste("n =", n_observacoes)]]$mean_beta_1, "\n")
cat("EQM de beta_0:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_0, "\n")
cat("EQM de beta_1:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_1, "\n")
}
# Definir parâmetros do modelo
set.seed(123)  # Para reprodutibilidade
n_simulacoes <- 10000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c( 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# Estimar os parâmetros do modelo de regressão linear
modelo <- lm(y ~ x)
# Armazenar as estimativas dos parâmetros
beta_0_est[i] <- coef(modelo)[1]
beta_1_est[i] <- coef(modelo)[2]
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est),
eqm_beta_0 = mean(  (beta_0 - beta_0_est)^2),
eqm_beta_1 = mean(  (beta_1 - beta_1_est)^2)
)
}
resultados
# Exibir os resultados
for (n_observacoes in tamanhos_amostra) {
cat("\nTamanho da amostra:", n_observacoes, "\n")
cat("Estimativa média de beta_0:", resultados[[paste("n =", n_observacoes)]]$mean_beta_0, "\n")
cat("Estimativa média de beta_1:", resultados[[paste("n =", n_observacoes)]]$mean_beta_1, "\n")
cat("EQM de beta_0:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_0, "\n")
cat("EQM de beta_1:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_1, "\n")
}
# Definir parâmetros do modelo
set.seed(123)  # Para reprodutibilidade
n_simulacoes <- 10000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c( 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# EStimacao dos parametros por MQO
beta_1_est[i] <- sum( (y - mean(y))(x - mean(x)) )/( sum( (x - mean(x))^2 )  )
beta_0_est[i] <- mean(y) - beta_1_est[i]*mean(x)
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est),
eqm_beta_0 = mean(  (beta_0 - beta_0_est)^2),
eqm_beta_1 = mean(  (beta_1 - beta_1_est)^2)
)
}
# Definir parâmetros do modelo
set.seed(123)  # Para reprodutibilidade
n_simulacoes <- 10000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c( 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# Vetores para armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# EStimacao dos parametros por MQO
beta_1_est[i] <- sum( ( y - mean(y) )*( x - mean(x) ) )/sum( ( x - mean(x) )^2 )
beta_0_est[i] <- mean(y) - beta_1_est[i]*mean(x)
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est),
eqm_beta_0 = mean(  (beta_0 - beta_0_est)^2),
eqm_beta_1 = mean(  (beta_1 - beta_1_est)^2)
)
}
resultados
# Exibir os resultados
for (n_observacoes in tamanhos_amostra) {
cat("\nTamanho da amostra:", n_observacoes, "\n")
cat("Estimativa média de beta_0:", resultados[[paste("n =", n_observacoes)]]$mean_beta_0, "\n")
cat("Estimativa média de beta_1:", resultados[[paste("n =", n_observacoes)]]$mean_beta_1, "\n")
cat("EQM de beta_0:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_0, "\n")
cat("EQM de beta_1:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_1, "\n")
}
set.seed(123)  # fixando semente
n_simulacoes <- 1000  # Número de simulações de Monte Carlo
tamanhos_amostra <- c( 10, 50, 100)  # Tamanhos de amostra para a simulação
## Fixando os valores verdadeiro dos parametros
beta_0 <- 5
beta_1 <- 10
# armazenar os resultados das simulações
resultados <- list()
# Loop sobre os diferentes tamanhos de amostra
for (n_observacoes in tamanhos_amostra) {
# Vetores para armazenar as estimativas dos coeficientes
beta_0_est <- numeric(n_simulacoes)
beta_1_est <- numeric(n_simulacoes)
# Loop de simulação de Monte Carlo
for (i in 1:n_simulacoes) {
# Gerar dados de exemplo
x <- rnorm(n_observacoes)  # Variável independente (X)
epsilon <- rnorm(n_observacoes, mean = 0, sd = 1)  # Erro (epsilon)
# Gerar a variável dependente (Y) com o modelo Y = beta_0 + beta_1 * X + erro
y <- beta_0 + beta_1 * x + epsilon
# EStimacao dos parametros por MQO
beta_1_est[i] <- sum( ( y - mean(y) )*( x - mean(x) ) )/sum( ( x - mean(x) )^2 )
beta_0_est[i] <- mean(y) - beta_1_est[i]*mean(x)
}
# Armazenar os resultados para o tamanho de amostra atual
resultados[[paste("n =", n_observacoes)]] <- list(
mean_beta_0 = mean(beta_0_est),
mean_beta_1 = mean(beta_1_est),
eqm_beta_0 = mean(  (beta_0 - beta_0_est)^2),
eqm_beta_1 = mean(  (beta_1 - beta_1_est)^2)
)
}
resultados
# Exibir os resultados
for (n_observacoes in tamanhos_amostra) {
cat("\nTamanho da amostra:", n_observacoes, "\n")
cat("Estimativa média de beta_0:", resultados[[paste("n =", n_observacoes)]]$mean_beta_0, "\n")
cat("Estimativa média de beta_1:", resultados[[paste("n =", n_observacoes)]]$mean_beta_1, "\n")
cat("EQM de beta_0:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_0, "\n")
cat("EQM de beta_1:", resultados[[paste("n =", n_observacoes)]]$eqm_beta_1, "\n")
}
beta_0 = 1
beta_1 = 5
x <- rnorm(100)  # Variável independente (X)
epsilon <- rnorm(100, mean = 0, sd = 1)  # Erro (epsilon)
y <- beta_0 + beta_1 * x + epsilon
# Estimar os parâmetros do modelo de regressão linear
modelo <- lm(y ~ x)
summary(modelo)
install.packages("wooldridge")
library(wooldridge)
data(package = "wooldridge")
install.packages("AER")
library(AER)
data(package = "AER")
data("CigarettesB")
head(CigarettesB)
data("CigarettesB")
install.packages("Ecdat")
library(Ecdat)
library(Ecdat)
data(package = "Ecdat")
data("Gasoline")
Gasoline
data(package = "AER")
data("CigarettesB")
CigarettesB
data("Hedonic")
head(Hedonic)
library(wooldridge)
data(package = "wooldridge")
data("consump")
consump
data(package = "wooldridge")
data("expendshares")
data("expendshares");expendshares
?expendshares
CigarettesB
?CigarettesB
cig_lm <- lm(packs ~ price, data = CigarettesB)
summary(cig_lm)
cig_lm2 <- lm(packs ~ price + income, data = CigarettesB)
summary(cig_lm2)
library(wooldridge)
data("phillips")
head(phillips[, c("inf", "unem")])
library(AER)
data("USMacroG")
head(USMacroG[, c("unemp", "inflation")])
data("Gasoline")
Gasoline
data("phillips")
phillips[, c("inf", "unem")]
phillips
phillips[, c("inf", "unem")]
df = phillips[, c("inf", "unem")]
df1 = phillips[, c("inf", "unem")]
?phillips
cig_lm <- lm(inf ~ unem, data = df1)
summary(cig_lm)
cig_lm <- lm(inf ~ unem + inf_1, data = df1)
df1 = phillips
cig_lm <- lm(inf ~ unem + inf_1, data = df1)
summary(cig_lm)
cig_lm <- lm(inf ~ unem + inf_1 + unem_1, data = df1)
summary(cig_lm)
library(wooldridge)
library(AER)
library(Ecdat)
### dados
wooldridge::data("phillips")
library(wooldridge)
library(AER)
library(Ecdat)
### dados
wooldridge::data("phillips")
### dados
data("phillips")
df1 = phillips
data(package = "Ecdat")
data("Gasoline")
Gasoline
data("Oil")
Oil
Workinghours
? Workinghours
cig_lm <- lm(hours ~ income, data = Workinghours)
cig_lm
summary(cig_lm)
cig_lm <- lm(hours ~ age, data = Workinghours)
summary(cig_lm)
cig_lm <- lm(hours ~ education, data = Workinghours)
summary(cig_lm)
cig_lm <- lm(hours ~ child13, data = Workinghours)
summary(cig_lm)
## Pacote Ecdat
cig_lm <- lm(hours ~ ., data = Workinghours)
summary(cig_lm)
cig_lm$residuals
hist(cig_lm$residuals)
qqnorm(cig_lm$residuals)
hist(cig_lm$residuals)
## residuos
res = cig_lm$residuals
hist(res, probability = TRUE, main = "Histograma com curva normal")
curve(dnorm(x, mean = mean(res), sd = sd(res)), add = TRUE, col = "red", lwd = 2)
qqnorm(res)
qqline(res, col = "red", lwd = 2)
library(nortest)
ad.test(res)
shapiro.test(res)
ks.test(res, "pnorm", mean = mean(res), sd = sd(res))
lillie.test(res)
ad.test(res)
shapiro.test(res)
lillie.test(res)
ks.test(res, "pnorm", mean = mean(res), sd = sd(res))
acf( res  )
plot(res)
library(wooldridge)
data(package = "wooldridge")
data(package = "AER")
library(Ecdat)
data(package = "Ecdat")
### dados pacote wooldridge
data("phillips")
phillips
?phillips
cig_lm <- lm(inf ~ unem, data = phillips)
summary(cig_lm)
cig_lm <- lm(inf ~ unem + inf_1, data = phillips)
summary(cig_lm)
cig_lm <- lm(inf ~ inf_1, data = phillips)
summary(cig_lm)
cig_lm <- lm(inf ~ inf_1 + cinf, data = phillips)
summary(cig_lm)
cig_lm <- lm(inf ~ inf_1, data = phillips)
summary(cig_lm)
### dados pacote AER
data("CigarettesB")
CigarettesB
cig_lm <- lm(packs ~ price, data = CigarettesB)
summary(cig_lm)
cig_lm <- lm(packs ~ price + income, data = CigarettesB)
summary(cig_lm)
cig_lm <- lm(packs ~ price + income, data = CigarettesB)
summary(cig_lm)
names(cig_lm)
## residuos
res = cig_lm$residuals
hist(res, probability = TRUE, main = "Histograma com curva normal")
curve(dnorm(x, mean = mean(res), sd = sd(res)), add = TRUE, col = "red", lwd = 2)
qqnorm(res)
qqline(res, col = "red", lwd = 2)
## testes de hipoteses para os residuos
library(nortest)
ad.test(res)
shapiro.test(res)
lillie.test(res)
ks.test(res, "pnorm", mean = mean(res), sd = sd(res))
## Autocorrelação e padrao homocedastico
acf( res  )
plot(res)
